//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""0ee29364-b139-4a84-9c97-bcd9f636199a"",
            ""actions"": [
                {
                    ""name"": ""FLAP"",
                    ""type"": ""Button"",
                    ""id"": ""1aea38a0-7b7c-4f07-8053-c0c08c2398c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MOUSE"",
                    ""type"": ""PassThrough"",
                    ""id"": ""55130fc0-eb09-4d28-806b-b60bedd2b7b7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""756a39a5-a8aa-400f-8a61-97d06c828f94"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FLAP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2510489a-1f5c-4f25-93ee-9dd88edae6ea"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MOUSE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""test"",
            ""id"": ""64989030-d1f6-40c2-8ac5-e7b96d9d6a2c"",
            ""actions"": [
                {
                    ""name"": ""test"",
                    ""type"": ""Button"",
                    ""id"": ""d50e9f81-f9ca-48bd-9f4d-43f9b92515c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aaf7e1fa-94fe-4fa9-abac-f9f4c21e3bb8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_FLAP = m_Movement.FindAction("FLAP", throwIfNotFound: true);
        m_Movement_MOUSE = m_Movement.FindAction("MOUSE", throwIfNotFound: true);
        // test
        m_test = asset.FindActionMap("test", throwIfNotFound: true);
        m_test_test = m_test.FindAction("test", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_FLAP;
    private readonly InputAction m_Movement_MOUSE;
    public struct MovementActions
    {
        private @PlayerInput m_Wrapper;
        public MovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @FLAP => m_Wrapper.m_Movement_FLAP;
        public InputAction @MOUSE => m_Wrapper.m_Movement_MOUSE;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @FLAP.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnFLAP;
                @FLAP.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnFLAP;
                @FLAP.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnFLAP;
                @MOUSE.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMOUSE;
                @MOUSE.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMOUSE;
                @MOUSE.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMOUSE;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @FLAP.started += instance.OnFLAP;
                @FLAP.performed += instance.OnFLAP;
                @FLAP.canceled += instance.OnFLAP;
                @MOUSE.started += instance.OnMOUSE;
                @MOUSE.performed += instance.OnMOUSE;
                @MOUSE.canceled += instance.OnMOUSE;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // test
    private readonly InputActionMap m_test;
    private ITestActions m_TestActionsCallbackInterface;
    private readonly InputAction m_test_test;
    public struct TestActions
    {
        private @PlayerInput m_Wrapper;
        public TestActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @test => m_Wrapper.m_test_test;
        public InputActionMap Get() { return m_Wrapper.m_test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void SetCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterface != null)
            {
                @test.started -= m_Wrapper.m_TestActionsCallbackInterface.OnTest;
                @test.performed -= m_Wrapper.m_TestActionsCallbackInterface.OnTest;
                @test.canceled -= m_Wrapper.m_TestActionsCallbackInterface.OnTest;
            }
            m_Wrapper.m_TestActionsCallbackInterface = instance;
            if (instance != null)
            {
                @test.started += instance.OnTest;
                @test.performed += instance.OnTest;
                @test.canceled += instance.OnTest;
            }
        }
    }
    public TestActions @test => new TestActions(this);
    public interface IMovementActions
    {
        void OnFLAP(InputAction.CallbackContext context);
        void OnMOUSE(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnTest(InputAction.CallbackContext context);
    }
}
